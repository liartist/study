# hosts: Ubuntu 22.04.02 root

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#before-you-begin
- name: swap 비활성화
  hosts:
    - master
    - worker
  become: true
  tasks:
    - name: swapoff (idempotent okay)
      ansible.builtin.command:
        bash -c 'swapoff -a'
    - name: swapoff 영구 적용 (idempotent okay)
      ansible.builtin.replace:
        path: /etc/fstab
        regexp: '(.*\sswap\s.*)'
        replace: '# \1'

# https://docs.docker.com/engine/install/ubuntu/
- name: containerd(도커 엔진) 설치
  hosts:
    - master
    - worker
  become: true
  tasks:
    - name: 필요 패키지 설치
      ansible.builtin.apt:
        update_cache: true
        name:
          - ca-certificates
          - curl
          - gnupg
    - name: docker gpg 키 다운로드
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        keyring: /etc/apt/keyrings/docker.gpg
    - name: architecture 획득 (idempotent okay)
      ansible.builtin.command:
        bash -c 'dpkg --print-architecture'
      register: dpkg_arch
    - name: codename 획득 (idempotent okay)
      ansible.builtin.command:
        bash -c '. /etc/os-release && echo "$VERSION_CODENAME"'
      register: os_codename
    - name: 레포지토리 설정
      ansible.builtin.apt_repository:
        filename: /etc/apt/sources.list.d/docker
        repo: "deb [arch={{ dpkg_arch.stdout }} signed-by=/etc/apt/keyrings/docker.gpg]
              https://download.docker.com/linux/ubuntu {{ os_codename.stdout }} stable"
    - name: Docker Engine, containerd 및 Docker Compose 설치
      ansible.builtin.apt:
        update_cache: true
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
    - name: SystemdCgroup 설정
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: '(SystemdCgroup = false)'
        replace: 'SystemdCgroup = true'
    - name: containerd 재시작 (idempotent okay)
      ansible.builtin.systemd:
        name: containerd
        state: restarted

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#installing-kubeadm-kubelet-and-kubectl
- name: kubeadm, kubelet 및 kubectl 설치
  hosts:
    - master
    - worker
  become: true
  tasks:
    - name: 필요 패키지 설치
      ansible.builtin.apt:
        update_cache: true
        name:
          - apt-transport-https
          - ca-certificates
          - curl
    - name: 구글 클라우드 gpg 키 다운로드
      ansible.builtin.apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        keyring: /etc/apt/keyrings/kubernetes-archive-keyring.gpg
    - name: 쿠버네티스 apt 레포 추가
      ansible.builtin.apt_repository:
        filename: /etc/apt/sources.list.d/kubernetes
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
    - name: kubelet, kubeadm, kubectl 설치
      ansible.builtin.apt:
        update_cache: true
        name:
          - kubelet
          - kubeadm
          - kubectl
    - name: kubelet 버전 고정
      ansible.builtin.dpkg_selections:
        name: kubelet
        selection: hold
    - name: kubeadm 버전 고정
      ansible.builtin.dpkg_selections:
        name: kubeadm
        selection: hold
    - name: kubectl 버전 고정
      ansible.builtin.dpkg_selections:
        name: kubectl
        selection: hold

# https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#enable-shell-autocompletion
- name: 셸 자동 완성 활성화
  hosts: master
  become: true
  tasks:
    - name: bash-completion 설치
      ansible.builtin.apt:
        update_cache: true
        name:
          bash-completion
    - name: bash-completion 활성화 (idempotent okay)
      ansible.builtin.command: 
        bash -c 'source /usr/share/bash-completion/bash_completion'
    - name: kubectl 자동 완성 활성화
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        line: source <(kubectl completion bash)
    - name: k를 kubectl의 alias로 사용
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        line: alias k=kubectl
    - name: k 자동완성
      ansible.builtin.lineinfile:
        path: ~/.bashrc
        line: complete -o default -F __start_kubectl k

# https://kubernetes.io/docs/setup/production-environment/container-runtimes/#forwarding-ipv4-and-letting-iptables-see-bridged-traffic
- name: IPv4를 포워딩하여 iptables가 브리지된 트래픽을 보게 하기
  hosts:
    - master
    - worker
  become: true
  tasks:
    - name: 커널 모듈 overlay 로드
      community.general.modprobe:
        name: overlay
    - name: 커널 모듈 br_netfilter 로드
      community.general.modprobe:
        name: br_netfilter
    - name: 커널 모듈 로드 영구 적용
      ansible.builtin.copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf
        mode: '0644'
    - name: sysctl 파라미터 설정 추가
      ansible.builtin.copy:
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
        dest: /etc/sysctl.d/k8s.conf
        mode: '0644'
    - name: sysctl 파라미터 적용 (idempotent okay)
      ansible.builtin.command:
        bash -c 'sudo sysctl --system'

# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/#initializing-your-control-plane-node
- name: 마스터 노드 등록
  hosts: master
  become: true
  tasks:
    - name: kubeadm reset (idempotent okay)
      ansible.builtin.command:
        bash -c 'kubeadm reset -f'
    - name: kube 설정 삭제 (idempotent okay)
      ansible.builtin.file:
        path: ~/.kube/
        state: absent
    - name: CNI 설정 삭제 (idempotent okay)
      ansible.builtin.file:
        path: /etc/cni/net.d/
        state: absent
    - name: iptable 정리 (idempotent okay)
      ansible.builtin.command:
        bash -c 'iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X'
    - name: containerd 재시작 (idempotent okay)
      ansible.builtin.systemd:
        name: containerd
        state: restarted
    - name: kubelet 재시작 (idempotent okay)
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
    - name: k8s cluster 리셋 대기
      ansible.builtin.pause:
        minutes: 1
    - name: kubeadm init (idempotent okay with reset)
      ansible.builtin.command:
        bash -c "kubeadm init
                --control-plane-endpoint={{ hostvars[groups['master'][0]]['ansible_host'] }}
                --pod-network-cidr=10.244.0.0/16 | tee kubeadm_init.log"
    - name: k8s cluster 시작 대기
      ansible.builtin.pause:
        minutes: 1
    - name: admin.conf 적용 (idempotent okay)
      ansible.builtin.command:
        bash -c 'export KUBECONFIG=/etc/kubernetes/admin.conf'
    - name: admin.conf 영구 적용
      ansible.builtin.lineinfile:
        path: /etc/bash.bashrc
        line: export KUBECONFIG=/etc/kubernetes/admin.conf
    - name: kubelet 재시작 (idempotent okay)
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
    - name: python3 설치
      ansible.builtin.apt:
        update_cache: true
        name:
          - python3
          - pip
    - name: pip 모듈 설치
      ansible.builtin.pip:
        name:
          - kubernetes
    - name: flannel yaml 파일 다운로드
      ansible.builtin.get_url:
        url: https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
        dest: ~/kube-flannel.yml
        mode: '0664'
    - name: flannel 적용 (idempotent okay)
      kubernetes.core.k8s:
        src: ~/kube-flannel.yml
        kubeconfig: /etc/kubernetes/admin.conf
    - name: flannel 시작 대기
      ansible.builtin.pause:
        minutes: 1
    - name: join token 출력 (idempotent okay)
      ansible.builtin.command:
        bash -c 'kubeadm token create --print-join-command'
      register: kubeadm_join_command

- name: 워커 노드 등록
  hosts: worker
  become: true
  tasks:
    - name: kubeadm reset (idempotent okay)
      ansible.builtin.command:
        bash -c 'kubeadm reset -f'
    - name: CNI 설정 삭제 (idempotent okay)
      ansible.builtin.file:
        path: /etc/cni/net.d/
        state: absent
    - name: kube 설정 삭제 (idempotent okay)
      ansible.builtin.file:
        path: ~/.kube/
        state: absent
    - name: iptable 정리 (idempotent okay)
      ansible.builtin.command:
        bash -c 'iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X'
    - name: containerd 재시작 (idempotent okay)
      ansible.builtin.systemd:
        name: containerd
        state: restarted
    - name: kubelet 재시작 (idempotent okay)
      ansible.builtin.systemd:
        name: kubelet
        state: restarted
    - name: k8s cluster 리셋 대기
      ansible.builtin.pause:
        minutes: 1
    - name: kubeadm join (idempotent okay with reset)
      ansible.builtin.command:
        bash -c "{{ hostvars[groups['master'][0]]['kubeadm_join_command']['stdout'] }}"
